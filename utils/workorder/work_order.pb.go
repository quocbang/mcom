// Code generated by protoc-gen-go. DO NOT EDIT.
// source: work_order.proto

package workorder

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Abnormality int32

const (
	Abnormality_ABNORMALITY_UNSPECIFIED Abnormality = 0
	Abnormality_NONE                    Abnormality = 1
	Abnormality_PLAN_MUTATION           Abnormality = 2
	Abnormality_WRONG_RESOURCE          Abnormality = 3
	Abnormality_STATION_MALFUNCTIONS    Abnormality = 4
	Abnormality_OTHERS                  Abnormality = 5
)

var Abnormality_name = map[int32]string{
	0: "ABNORMALITY_UNSPECIFIED",
	1: "NONE",
	2: "PLAN_MUTATION",
	3: "WRONG_RESOURCE",
	4: "STATION_MALFUNCTIONS",
	5: "OTHERS",
}

var Abnormality_value = map[string]int32{
	"ABNORMALITY_UNSPECIFIED": 0,
	"NONE":                    1,
	"PLAN_MUTATION":           2,
	"WRONG_RESOURCE":          3,
	"STATION_MALFUNCTIONS":    4,
	"OTHERS":                  5,
}

func (x Abnormality) String() string {
	return proto.EnumName(Abnormality_name, int32(x))
}

func (Abnormality) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f50d4b0a483387a6, []int{0}
}

type BatchSize int32

const (
	BatchSize_PER_BATCH_QUANTITIES BatchSize = 0
	BatchSize_FIXED_QUANTITY       BatchSize = 1
	BatchSize_PLAN_QUANTITY        BatchSize = 2
)

var BatchSize_name = map[int32]string{
	0: "PER_BATCH_QUANTITIES",
	1: "FIXED_QUANTITY",
	2: "PLAN_QUANTITY",
}

var BatchSize_value = map[string]int32{
	"PER_BATCH_QUANTITIES": 0,
	"FIXED_QUANTITY":       1,
	"PLAN_QUANTITY":        2,
}

func (x BatchSize) String() string {
	return proto.EnumName(BatchSize_name, int32(x))
}

func (BatchSize) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f50d4b0a483387a6, []int{1}
}

func init() {
	proto.RegisterEnum("workorder.Abnormality", Abnormality_name, Abnormality_value)
	proto.RegisterEnum("workorder.BatchSize", BatchSize_name, BatchSize_value)
}

func init() { proto.RegisterFile("work_order.proto", fileDescriptor_f50d4b0a483387a6) }

var fileDescriptor_f50d4b0a483387a6 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcf, 0xcd, 0x4a, 0x03, 0x41,
	0x0c, 0x07, 0xf0, 0xb6, 0xd6, 0x62, 0x23, 0xca, 0x18, 0x04, 0x05, 0xdf, 0xa0, 0x07, 0x2f, 0x3e,
	0x41, 0x76, 0x9b, 0xb5, 0x03, 0xbb, 0x99, 0x75, 0x3e, 0xd0, 0x9e, 0x86, 0x56, 0x0b, 0x16, 0x3f,
	0x46, 0x86, 0x05, 0xd1, 0x9b, 0x6f, 0x2e, 0x5b, 0x51, 0xbc, 0x85, 0x1f, 0x09, 0xf9, 0xff, 0x41,
	0xbd, 0xa7, 0xfc, 0x14, 0x53, 0x7e, 0xd8, 0xe4, 0xcb, 0xb7, 0x9c, 0xba, 0x84, 0xd3, 0x5e, 0x76,
	0x30, 0xfb, 0x1a, 0xc2, 0x21, 0xad, 0x5f, 0x53, 0x7e, 0x59, 0x3d, 0x6f, 0xbb, 0x0f, 0xbc, 0x80,
	0x33, 0x2a, 0xc4, 0xd8, 0x86, 0x6a, 0xed, 0x97, 0x31, 0x88, 0x6b, 0xb9, 0xd4, 0x95, 0xe6, 0xb9,
	0x1a, 0xe0, 0x01, 0x8c, 0xc5, 0x08, 0xab, 0x21, 0x9e, 0xc0, 0x51, 0x5b, 0x93, 0xc4, 0x26, 0x78,
	0xf2, 0xda, 0x88, 0x1a, 0x21, 0xc2, 0xf1, 0xad, 0x35, 0x72, 0x1d, 0x2d, 0x3b, 0x13, 0x6c, 0xc9,
	0x6a, 0x0f, 0xcf, 0xe1, 0xd4, 0xfd, 0x2c, 0xc4, 0x86, 0xea, 0x2a, 0x48, 0xd9, 0xcf, 0x4e, 0x8d,
	0x11, 0x60, 0x62, 0xfc, 0x82, 0xad, 0x53, 0xfb, 0xb3, 0x1a, 0xa6, 0xc5, 0xaa, 0xbb, 0x7f, 0x74,
	0xdb, 0xcf, 0x4d, 0x7f, 0xd2, 0xb2, 0x8d, 0x05, 0xf9, 0x72, 0x11, 0x6f, 0x02, 0x89, 0xd7, 0x5e,
	0xb3, 0x53, 0x83, 0xfe, 0x41, 0xa5, 0xef, 0x78, 0xfe, 0xab, 0xcb, 0x7f, 0x39, 0xfe, 0x68, 0xb4,
	0x9e, 0xec, 0x3a, 0x5e, 0x7d, 0x07, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xb5, 0x0a, 0x48, 0xf7, 0x00,
	0x00, 0x00,
}
