// Code generated by cmd\mockgenerator\main.go. Do NOT EDIT.

package mock

import (
	"context"
	"gitlab.kenda.com.tw/kenda/mcom"
)

//  function name list
const (
	FuncAddSubstitutions               FuncName = "AddSubstitutions"
	FuncBindRecordsCheck               FuncName = "BindRecordsCheck"
	FuncClose                          FuncName = "Close"
	FuncCreateAccounts                 FuncName = "CreateAccounts"
	FuncCreateBatch                    FuncName = "CreateBatch"
	FuncCreateBlobResourceRecord       FuncName = "CreateBlobResourceRecord"
	FuncCreateCarrier                  FuncName = "CreateCarrier"
	FuncCreateCollectRecord            FuncName = "CreateCollectRecord"
	FuncCreateDepartments              FuncName = "CreateDepartments"
	FuncCreateLimitaryHour             FuncName = "CreateLimitaryHour"
	FuncCreateMaterialResources        FuncName = "CreateMaterialResources"
	FuncCreatePackRecords              FuncName = "CreatePackRecords"
	FuncCreateProductPlan              FuncName = "CreateProductPlan"
	FuncCreateRecipes                  FuncName = "CreateRecipes"
	FuncCreateStation                  FuncName = "CreateStation"
	FuncCreateStationGroup             FuncName = "CreateStationGroup"
	FuncCreateUsers                    FuncName = "CreateUsers"
	FuncCreateWorkOrders               FuncName = "CreateWorkOrders"
	FuncDeleteAccount                  FuncName = "DeleteAccount"
	FuncDeleteCarrier                  FuncName = "DeleteCarrier"
	FuncDeleteDepartment               FuncName = "DeleteDepartment"
	FuncDeleteRecipe                   FuncName = "DeleteRecipe"
	FuncDeleteStation                  FuncName = "DeleteStation"
	FuncDeleteStationGroup             FuncName = "DeleteStationGroup"
	FuncDeleteSubstitutions            FuncName = "DeleteSubstitutions"
	FuncDeleteUser                     FuncName = "DeleteUser"
	FuncFeed                           FuncName = "Feed"
	FuncGetBatch                       FuncName = "GetBatch"
	FuncGetCarrier                     FuncName = "GetCarrier"
	FuncGetCollectRecord               FuncName = "GetCollectRecord"
	FuncGetLimitaryHour                FuncName = "GetLimitaryHour"
	FuncGetMaterial                    FuncName = "GetMaterial"
	FuncGetMaterialExtendDate          FuncName = "GetMaterialExtendDate"
	FuncGetMaterialResource            FuncName = "GetMaterialResource"
	FuncGetMaterialResourceIdentity    FuncName = "GetMaterialResourceIdentity"
	FuncGetProcessDefinition           FuncName = "GetProcessDefinition"
	FuncGetRecipe                      FuncName = "GetRecipe"
	FuncGetResourceWarehouse           FuncName = "GetResourceWarehouse"
	FuncGetSite                        FuncName = "GetSite"
	FuncGetStation                     FuncName = "GetStation"
	FuncGetStationConfiguration        FuncName = "GetStationConfiguration"
	FuncGetTokenInfo                   FuncName = "GetTokenInfo"
	FuncGetToolResource                FuncName = "GetToolResource"
	FuncGetWorkOrder                   FuncName = "GetWorkOrder"
	FuncIsProductExisted               FuncName = "IsProductExisted"
	FuncListAllDepartment              FuncName = "ListAllDepartment"
	FuncListAssociatedStations         FuncName = "ListAssociatedStations"
	FuncListBatches                    FuncName = "ListBatches"
	FuncListBlobURIs                   FuncName = "ListBlobURIs"
	FuncListCarriers                   FuncName = "ListCarriers"
	FuncListChangeableStatus           FuncName = "ListChangeableStatus"
	FuncListCollectRecords             FuncName = "ListCollectRecords"
	FuncListControlAreas               FuncName = "ListControlAreas"
	FuncListControlReasons             FuncName = "ListControlReasons"
	FuncListFeedRecords                FuncName = "ListFeedRecords"
	FuncListMaterialResourceIdentities FuncName = "ListMaterialResourceIdentities"
	FuncListMaterialResourceStatus     FuncName = "ListMaterialResourceStatus"
	FuncListMaterialResources          FuncName = "ListMaterialResources"
	FuncListMaterialResourcesById      FuncName = "ListMaterialResourcesById"
	FuncListMultipleSubstitutions      FuncName = "ListMultipleSubstitutions"
	FuncListPackRecords                FuncName = "ListPackRecords"
	FuncListProductGroups              FuncName = "ListProductGroups"
	FuncListProductIDs                 FuncName = "ListProductIDs"
	FuncListProductPlans               FuncName = "ListProductPlans"
	FuncListProductTypes               FuncName = "ListProductTypes"
	FuncListRecipesByProduct           FuncName = "ListRecipesByProduct"
	FuncListRoles                      FuncName = "ListRoles"
	FuncListSiteMaterials              FuncName = "ListSiteMaterials"
	FuncListSiteSubType                FuncName = "ListSiteSubType"
	FuncListSiteType                   FuncName = "ListSiteType"
	FuncListStationIDs                 FuncName = "ListStationIDs"
	FuncListStationState               FuncName = "ListStationState"
	FuncListStations                   FuncName = "ListStations"
	FuncListSubstitutions              FuncName = "ListSubstitutions"
	FuncListToolResources              FuncName = "ListToolResources"
	FuncListUnauthorizedUsers          FuncName = "ListUnauthorizedUsers"
	FuncListUserRoles                  FuncName = "ListUserRoles"
	FuncListWorkOrders                 FuncName = "ListWorkOrders"
	FuncListWorkOrdersByDuration       FuncName = "ListWorkOrdersByDuration"
	FuncListWorkOrdersByIDs            FuncName = "ListWorkOrdersByIDs"
	FuncMaterialResourceBind           FuncName = "MaterialResourceBind"
	FuncMaterialResourceBindV2         FuncName = "MaterialResourceBindV2"
	FuncSetStationConfiguration        FuncName = "SetStationConfiguration"
	FuncSignIn                         FuncName = "SignIn"
	FuncSignInStation                  FuncName = "SignInStation"
	FuncSignOut                        FuncName = "SignOut"
	FuncSignOutStation                 FuncName = "SignOutStation"
	FuncSignOutStations                FuncName = "SignOutStations"
	FuncSplitMaterialResource          FuncName = "SplitMaterialResource"
	FuncToolResourceBind               FuncName = "ToolResourceBind"
	FuncToolResourceBindV2             FuncName = "ToolResourceBindV2"
	FuncUpdateAccount                  FuncName = "UpdateAccount"
	FuncUpdateBatch                    FuncName = "UpdateBatch"
	FuncUpdateCarrier                  FuncName = "UpdateCarrier"
	FuncUpdateDepartment               FuncName = "UpdateDepartment"
	FuncUpdateMaterial                 FuncName = "UpdateMaterial"
	FuncUpdateStation                  FuncName = "UpdateStation"
	FuncUpdateStationGroup             FuncName = "UpdateStationGroup"
	FuncUpdateSubstitutions            FuncName = "UpdateSubstitutions"
	FuncUpdateUser                     FuncName = "UpdateUser"
	FuncUpdateWorkOrders               FuncName = "UpdateWorkOrders"
	FuncWarehousingStock               FuncName = "WarehousingStock"
)

func (dm *dataManager) AddSubstitutions(ctx context.Context, req mcom.BasicSubstitutionRequest) error {
	_, err := dm.run(ctx, FuncAddSubstitutions, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) BindRecordsCheck(ctx context.Context, req mcom.BindRecordsCheckRequest) error {
	_, err := dm.run(ctx, FuncBindRecordsCheck, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) CreateAccounts(ctx context.Context, req mcom.CreateAccountsRequest) error {
	_, err := dm.run(ctx, FuncCreateAccounts, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) CreateBatch(ctx context.Context, req mcom.CreateBatchRequest) error {
	_, err := dm.run(ctx, FuncCreateBatch, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) CreateBlobResourceRecord(ctx context.Context, req mcom.CreateBlobResourceRecordRequest) error {
	_, err := dm.run(ctx, FuncCreateBlobResourceRecord, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) CreateCarrier(ctx context.Context, req mcom.CreateCarrierRequest) error {
	_, err := dm.run(ctx, FuncCreateCarrier, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) CreateCollectRecord(ctx context.Context, req mcom.CreateCollectRecordRequest) error {
	_, err := dm.run(ctx, FuncCreateCollectRecord, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) CreateDepartments(ctx context.Context, req mcom.CreateDepartmentsRequest) error {
	_, err := dm.run(ctx, FuncCreateDepartments, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) CreateLimitaryHour(ctx context.Context, req mcom.CreateLimitaryHourRequest) error {
	_, err := dm.run(ctx, FuncCreateLimitaryHour, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) CreateMaterialResources(ctx context.Context, req mcom.CreateMaterialResourcesRequest, opts ...mcom.CreateMaterialResourcesOption) (mcom.CreateMaterialResourcesReply, error) {
	reply, err := dm.run(ctx, FuncCreateMaterialResources, req, func(expectedOpts []interface{}) (*parsedOptions, error) {
		if len(opts) != len(expectedOpts) {
			return nil, newMismatchInputOptionLengthError(len(expectedOpts), len(opts))
		}
		expectedOptions := make([]mcom.CreateMaterialResourcesOption, len(expectedOpts))
		for i, inputOpt := range expectedOpts {
			o, ok := inputOpt.(mcom.CreateMaterialResourcesOption)
			if !ok {
				return nil, badOptionType("mcom.CreateMaterialResourcesOption")
			}
			expectedOptions[i] = o
		}
		return &parsedOptions{
			expected: mcom.ParseCreateMaterialResourcesOptions(expectedOptions), actual: mcom.ParseCreateMaterialResourcesOptions(opts),
		}, nil
	}, func(i interface{}) bool {
		_, ok := i.(mcom.CreateMaterialResourcesReply)
		return ok
	})
	if err != nil {
		return nil, err
	}
	return reply.(mcom.CreateMaterialResourcesReply), nil
}

func (dm *dataManager) CreatePackRecords(ctx context.Context, req mcom.CreatePackRecordsRequest) error {
	_, err := dm.run(ctx, FuncCreatePackRecords, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) CreateProductPlan(ctx context.Context, req mcom.CreateProductionPlanRequest) error {
	_, err := dm.run(ctx, FuncCreateProductPlan, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) CreateRecipes(ctx context.Context, req mcom.CreateRecipesRequest) error {
	_, err := dm.run(ctx, FuncCreateRecipes, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) CreateStation(ctx context.Context, req mcom.CreateStationRequest) error {
	_, err := dm.run(ctx, FuncCreateStation, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) CreateStationGroup(ctx context.Context, req mcom.StationGroupRequest) error {
	_, err := dm.run(ctx, FuncCreateStationGroup, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) CreateUsers(ctx context.Context, req mcom.CreateUsersRequest) error {
	_, err := dm.run(ctx, FuncCreateUsers, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) CreateWorkOrders(ctx context.Context, req mcom.CreateWorkOrdersRequest) (mcom.CreateWorkOrdersReply, error) {
	reply, err := dm.run(ctx, FuncCreateWorkOrders, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.CreateWorkOrdersReply)
		return ok
	})
	if err != nil {
		return mcom.CreateWorkOrdersReply{}, err
	}
	return reply.(mcom.CreateWorkOrdersReply), nil
}

func (dm *dataManager) DeleteAccount(ctx context.Context, req mcom.DeleteAccountRequest) error {
	_, err := dm.run(ctx, FuncDeleteAccount, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) DeleteCarrier(ctx context.Context, req mcom.DeleteCarrierRequest) error {
	_, err := dm.run(ctx, FuncDeleteCarrier, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) DeleteDepartment(ctx context.Context, req mcom.DeleteDepartmentRequest) error {
	_, err := dm.run(ctx, FuncDeleteDepartment, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) DeleteRecipe(ctx context.Context, req mcom.DeleteRecipeRequest) error {
	_, err := dm.run(ctx, FuncDeleteRecipe, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) DeleteStation(ctx context.Context, req mcom.DeleteStationRequest) error {
	_, err := dm.run(ctx, FuncDeleteStation, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) DeleteStationGroup(ctx context.Context, req mcom.DeleteStationGroupRequest) error {
	_, err := dm.run(ctx, FuncDeleteStationGroup, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) DeleteSubstitutions(ctx context.Context, req mcom.DeleteSubstitutionsRequest) error {
	_, err := dm.run(ctx, FuncDeleteSubstitutions, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) DeleteUser(ctx context.Context, req mcom.DeleteUserRequest) error {
	_, err := dm.run(ctx, FuncDeleteUser, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) Feed(ctx context.Context, req mcom.FeedRequest) (mcom.FeedReply, error) {
	reply, err := dm.run(ctx, FuncFeed, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.FeedReply)
		return ok
	})
	if err != nil {
		return mcom.FeedReply{}, err
	}
	return reply.(mcom.FeedReply), nil
}

func (dm *dataManager) GetBatch(ctx context.Context, req mcom.GetBatchRequest) (mcom.GetBatchReply, error) {
	reply, err := dm.run(ctx, FuncGetBatch, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetBatchReply)
		return ok
	})
	if err != nil {
		return mcom.GetBatchReply{}, err
	}
	return reply.(mcom.GetBatchReply), nil
}

func (dm *dataManager) GetCarrier(ctx context.Context, req mcom.GetCarrierRequest) (mcom.GetCarrierReply, error) {
	reply, err := dm.run(ctx, FuncGetCarrier, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetCarrierReply)
		return ok
	})
	if err != nil {
		return mcom.GetCarrierReply{}, err
	}
	return reply.(mcom.GetCarrierReply), nil
}

func (dm *dataManager) GetCollectRecord(ctx context.Context, req mcom.GetCollectRecordRequest) (mcom.GetCollectRecordReply, error) {
	reply, err := dm.run(ctx, FuncGetCollectRecord, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetCollectRecordReply)
		return ok
	})
	if err != nil {
		return mcom.GetCollectRecordReply{}, err
	}
	return reply.(mcom.GetCollectRecordReply), nil
}

func (dm *dataManager) GetLimitaryHour(ctx context.Context, req mcom.GetLimitaryHourRequest) (mcom.GetLimitaryHourReply, error) {
	reply, err := dm.run(ctx, FuncGetLimitaryHour, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetLimitaryHourReply)
		return ok
	})
	if err != nil {
		return mcom.GetLimitaryHourReply{}, err
	}
	return reply.(mcom.GetLimitaryHourReply), nil
}

func (dm *dataManager) GetMaterial(ctx context.Context, req mcom.GetMaterialRequest) (mcom.GetMaterialReply, error) {
	reply, err := dm.run(ctx, FuncGetMaterial, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetMaterialReply)
		return ok
	})
	if err != nil {
		return mcom.GetMaterialReply{}, err
	}
	return reply.(mcom.GetMaterialReply), nil
}

func (dm *dataManager) GetMaterialExtendDate(ctx context.Context, req mcom.GetMaterialExtendDateRequest) (mcom.GetMaterialExtendDateReply, error) {
	reply, err := dm.run(ctx, FuncGetMaterialExtendDate, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetMaterialExtendDateReply)
		return ok
	})
	if err != nil {
		return 0, err
	}
	return reply.(mcom.GetMaterialExtendDateReply), nil
}

func (dm *dataManager) GetMaterialResource(ctx context.Context, req mcom.GetMaterialResourceRequest) (mcom.GetMaterialResourceReply, error) {
	reply, err := dm.run(ctx, FuncGetMaterialResource, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetMaterialResourceReply)
		return ok
	})
	if err != nil {
		return nil, err
	}
	return reply.(mcom.GetMaterialResourceReply), nil
}

func (dm *dataManager) GetMaterialResourceIdentity(ctx context.Context, req mcom.GetMaterialResourceIdentityRequest) (mcom.GetMaterialResourceIdentityReply, error) {
	reply, err := dm.run(ctx, FuncGetMaterialResourceIdentity, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetMaterialResourceIdentityReply)
		return ok
	})
	if err != nil {
		return mcom.GetMaterialResourceIdentityReply{}, err
	}
	return reply.(mcom.GetMaterialResourceIdentityReply), nil
}

func (dm *dataManager) GetProcessDefinition(ctx context.Context, req mcom.GetProcessDefinitionRequest) (mcom.GetProcessDefinitionReply, error) {
	reply, err := dm.run(ctx, FuncGetProcessDefinition, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetProcessDefinitionReply)
		return ok
	})
	if err != nil {
		return mcom.GetProcessDefinitionReply{}, err
	}
	return reply.(mcom.GetProcessDefinitionReply), nil
}

func (dm *dataManager) GetRecipe(ctx context.Context, req mcom.GetRecipeRequest) (mcom.GetRecipeReply, error) {
	reply, err := dm.run(ctx, FuncGetRecipe, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetRecipeReply)
		return ok
	})
	if err != nil {
		return mcom.GetRecipeReply{}, err
	}
	return reply.(mcom.GetRecipeReply), nil
}

func (dm *dataManager) GetResourceWarehouse(ctx context.Context, req mcom.GetResourceWarehouseRequest) (mcom.GetResourceWarehouseReply, error) {
	reply, err := dm.run(ctx, FuncGetResourceWarehouse, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetResourceWarehouseReply)
		return ok
	})
	if err != nil {
		return mcom.GetResourceWarehouseReply{}, err
	}
	return reply.(mcom.GetResourceWarehouseReply), nil
}

func (dm *dataManager) GetSite(ctx context.Context, req mcom.GetSiteRequest) (mcom.GetSiteReply, error) {
	reply, err := dm.run(ctx, FuncGetSite, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetSiteReply)
		return ok
	})
	if err != nil {
		return mcom.GetSiteReply{}, err
	}
	return reply.(mcom.GetSiteReply), nil
}

func (dm *dataManager) GetStation(ctx context.Context, req mcom.GetStationRequest) (mcom.GetStationReply, error) {
	reply, err := dm.run(ctx, FuncGetStation, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetStationReply)
		return ok
	})
	if err != nil {
		return mcom.GetStationReply{}, err
	}
	return reply.(mcom.GetStationReply), nil
}

func (dm *dataManager) GetStationConfiguration(ctx context.Context, req mcom.GetStationConfigurationRequest) (mcom.GetStationConfigurationReply, error) {
	reply, err := dm.run(ctx, FuncGetStationConfiguration, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetStationConfigurationReply)
		return ok
	})
	if err != nil {
		return mcom.GetStationConfigurationReply{}, err
	}
	return reply.(mcom.GetStationConfigurationReply), nil
}

func (dm *dataManager) GetTokenInfo(ctx context.Context, req mcom.GetTokenInfoRequest) (mcom.GetTokenInfoReply, error) {
	reply, err := dm.run(ctx, FuncGetTokenInfo, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetTokenInfoReply)
		return ok
	})
	if err != nil {
		return mcom.GetTokenInfoReply{}, err
	}
	return reply.(mcom.GetTokenInfoReply), nil
}

func (dm *dataManager) GetToolResource(ctx context.Context, req mcom.GetToolResourceRequest) (mcom.GetToolResourceReply, error) {
	reply, err := dm.run(ctx, FuncGetToolResource, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetToolResourceReply)
		return ok
	})
	if err != nil {
		return mcom.GetToolResourceReply{}, err
	}
	return reply.(mcom.GetToolResourceReply), nil
}

func (dm *dataManager) GetWorkOrder(ctx context.Context, req mcom.GetWorkOrderRequest) (mcom.GetWorkOrderReply, error) {
	reply, err := dm.run(ctx, FuncGetWorkOrder, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.GetWorkOrderReply)
		return ok
	})
	if err != nil {
		return mcom.GetWorkOrderReply{}, err
	}
	return reply.(mcom.GetWorkOrderReply), nil
}

func (dm *dataManager) IsProductExisted(ctx context.Context, req string) (bool, error) {
	reply, err := dm.run(ctx, FuncIsProductExisted, req, noOptions, func(i interface{}) bool {
		_, ok := i.(bool)
		return ok
	})
	if err != nil {
		return false, err
	}
	return reply.(bool), nil
}

func (dm *dataManager) ListAllDepartment(ctx context.Context) (mcom.ListAllDepartmentReply, error) {
	reply, err := dm.run(ctx, FuncListAllDepartment, nil, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListAllDepartmentReply)
		return ok
	})
	if err != nil {
		return mcom.ListAllDepartmentReply{}, err
	}
	return reply.(mcom.ListAllDepartmentReply), nil
}

func (dm *dataManager) ListAssociatedStations(ctx context.Context, req mcom.ListAssociatedStationsRequest) (mcom.ListAssociatedStationsReply, error) {
	reply, err := dm.run(ctx, FuncListAssociatedStations, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListAssociatedStationsReply)
		return ok
	})
	if err != nil {
		return mcom.ListAssociatedStationsReply{}, err
	}
	return reply.(mcom.ListAssociatedStationsReply), nil
}

func (dm *dataManager) ListBatches(ctx context.Context, req mcom.ListBatchesRequest) (mcom.ListBatchesReply, error) {
	reply, err := dm.run(ctx, FuncListBatches, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListBatchesReply)
		return ok
	})
	if err != nil {
		return nil, err
	}
	return reply.(mcom.ListBatchesReply), nil
}

func (dm *dataManager) ListBlobURIs(ctx context.Context, req mcom.ListBlobURIsRequest) (mcom.ListBlobURIsReply, error) {
	reply, err := dm.run(ctx, FuncListBlobURIs, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListBlobURIsReply)
		return ok
	})
	if err != nil {
		return mcom.ListBlobURIsReply{}, err
	}
	return reply.(mcom.ListBlobURIsReply), nil
}

func (dm *dataManager) ListCarriers(ctx context.Context, req mcom.ListCarriersRequest) (mcom.ListCarriersReply, error) {
	reply, err := dm.run(ctx, FuncListCarriers, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListCarriersReply)
		return ok
	})
	if err != nil {
		return mcom.ListCarriersReply{}, err
	}
	return reply.(mcom.ListCarriersReply), nil
}

func (dm *dataManager) ListChangeableStatus(ctx context.Context, req mcom.ListChangeableStatusRequest) (mcom.ListChangeableStatusReply, error) {
	reply, err := dm.run(ctx, FuncListChangeableStatus, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListChangeableStatusReply)
		return ok
	})
	if err != nil {
		return mcom.ListChangeableStatusReply{}, err
	}
	return reply.(mcom.ListChangeableStatusReply), nil
}

func (dm *dataManager) ListCollectRecords(ctx context.Context, req mcom.ListRecordsRequest) (mcom.ListCollectRecordsReply, error) {
	reply, err := dm.run(ctx, FuncListCollectRecords, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListCollectRecordsReply)
		return ok
	})
	if err != nil {
		return nil, err
	}
	return reply.(mcom.ListCollectRecordsReply), nil
}

func (dm *dataManager) ListControlAreas(ctx context.Context) (mcom.ListControlAreasReply, error) {
	reply, err := dm.run(ctx, FuncListControlAreas, nil, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListControlAreasReply)
		return ok
	})
	if err != nil {
		return mcom.ListControlAreasReply{}, err
	}
	return reply.(mcom.ListControlAreasReply), nil
}

func (dm *dataManager) ListControlReasons(ctx context.Context) (mcom.ListControlReasonsReply, error) {
	reply, err := dm.run(ctx, FuncListControlReasons, nil, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListControlReasonsReply)
		return ok
	})
	if err != nil {
		return mcom.ListControlReasonsReply{}, err
	}
	return reply.(mcom.ListControlReasonsReply), nil
}

func (dm *dataManager) ListFeedRecords(ctx context.Context, req mcom.ListRecordsRequest) (mcom.ListFeedRecordReply, error) {
	reply, err := dm.run(ctx, FuncListFeedRecords, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListFeedRecordReply)
		return ok
	})
	if err != nil {
		return nil, err
	}
	return reply.(mcom.ListFeedRecordReply), nil
}

func (dm *dataManager) ListMaterialResourceIdentities(ctx context.Context, req mcom.ListMaterialResourceIdentitiesRequest) (mcom.ListMaterialResourceIdentitiesReply, error) {
	reply, err := dm.run(ctx, FuncListMaterialResourceIdentities, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListMaterialResourceIdentitiesReply)
		return ok
	})
	if err != nil {
		return mcom.ListMaterialResourceIdentitiesReply{}, err
	}
	return reply.(mcom.ListMaterialResourceIdentitiesReply), nil
}

func (dm *dataManager) ListMaterialResourceStatus(ctx context.Context) (mcom.ListMaterialResourceStatusReply, error) {
	reply, err := dm.run(ctx, FuncListMaterialResourceStatus, nil, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListMaterialResourceStatusReply)
		return ok
	})
	if err != nil {
		return nil, err
	}
	return reply.(mcom.ListMaterialResourceStatusReply), nil
}

func (dm *dataManager) ListMaterialResources(ctx context.Context, req mcom.ListMaterialResourcesRequest) (mcom.ListMaterialResourcesReply, error) {
	reply, err := dm.run(ctx, FuncListMaterialResources, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListMaterialResourcesReply)
		return ok
	})
	if err != nil {
		return mcom.ListMaterialResourcesReply{}, err
	}
	return reply.(mcom.ListMaterialResourcesReply), nil
}

func (dm *dataManager) ListMaterialResourcesById(ctx context.Context, req mcom.ListMaterialResourcesByIdRequest) (mcom.ListMaterialResourcesByIdReply, error) {
	reply, err := dm.run(ctx, FuncListMaterialResourcesById, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListMaterialResourcesByIdReply)
		return ok
	})
	if err != nil {
		return mcom.ListMaterialResourcesByIdReply{}, err
	}
	return reply.(mcom.ListMaterialResourcesByIdReply), nil
}

func (dm *dataManager) ListMultipleSubstitutions(ctx context.Context, req mcom.ListMultipleSubstitutionsRequest) (mcom.ListMultipleSubstitutionsReply, error) {
	reply, err := dm.run(ctx, FuncListMultipleSubstitutions, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListMultipleSubstitutionsReply)
		return ok
	})
	if err != nil {
		return mcom.ListMultipleSubstitutionsReply{}, err
	}
	return reply.(mcom.ListMultipleSubstitutionsReply), nil
}

func (dm *dataManager) ListPackRecords(ctx context.Context) (mcom.ListPackRecordsReply, error) {
	reply, err := dm.run(ctx, FuncListPackRecords, nil, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListPackRecordsReply)
		return ok
	})
	if err != nil {
		return mcom.ListPackRecordsReply{}, err
	}
	return reply.(mcom.ListPackRecordsReply), nil
}

func (dm *dataManager) ListProductGroups(ctx context.Context, req mcom.ListProductGroupsRequest) (mcom.ListProductGroupsReply, error) {
	reply, err := dm.run(ctx, FuncListProductGroups, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListProductGroupsReply)
		return ok
	})
	if err != nil {
		return mcom.ListProductGroupsReply{}, err
	}
	return reply.(mcom.ListProductGroupsReply), nil
}

func (dm *dataManager) ListProductIDs(ctx context.Context, req mcom.ListProductIDsRequest) (mcom.ListProductIDsReply, error) {
	reply, err := dm.run(ctx, FuncListProductIDs, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListProductIDsReply)
		return ok
	})
	if err != nil {
		return nil, err
	}
	return reply.(mcom.ListProductIDsReply), nil
}

func (dm *dataManager) ListProductPlans(ctx context.Context, req mcom.ListProductPlansRequest) (mcom.ListProductPlansReply, error) {
	reply, err := dm.run(ctx, FuncListProductPlans, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListProductPlansReply)
		return ok
	})
	if err != nil {
		return mcom.ListProductPlansReply{}, err
	}
	return reply.(mcom.ListProductPlansReply), nil
}

func (dm *dataManager) ListProductTypes(ctx context.Context, req mcom.ListProductTypesRequest) (mcom.ListProductTypesReply, error) {
	reply, err := dm.run(ctx, FuncListProductTypes, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListProductTypesReply)
		return ok
	})
	if err != nil {
		return nil, err
	}
	return reply.(mcom.ListProductTypesReply), nil
}

func (dm *dataManager) ListRecipesByProduct(ctx context.Context, req mcom.ListRecipesByProductRequest) (mcom.ListRecipesByProductReply, error) {
	reply, err := dm.run(ctx, FuncListRecipesByProduct, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListRecipesByProductReply)
		return ok
	})
	if err != nil {
		return mcom.ListRecipesByProductReply{}, err
	}
	return reply.(mcom.ListRecipesByProductReply), nil
}

func (dm *dataManager) ListRoles(ctx context.Context) (mcom.ListRolesReply, error) {
	reply, err := dm.run(ctx, FuncListRoles, nil, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListRolesReply)
		return ok
	})
	if err != nil {
		return mcom.ListRolesReply{}, err
	}
	return reply.(mcom.ListRolesReply), nil
}

func (dm *dataManager) ListSiteMaterials(ctx context.Context, req mcom.ListSiteMaterialsRequest) (mcom.ListSiteMaterialsReply, error) {
	reply, err := dm.run(ctx, FuncListSiteMaterials, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListSiteMaterialsReply)
		return ok
	})
	if err != nil {
		return nil, err
	}
	return reply.(mcom.ListSiteMaterialsReply), nil
}

func (dm *dataManager) ListSiteSubType(ctx context.Context) (mcom.ListSiteSubTypeReply, error) {
	reply, err := dm.run(ctx, FuncListSiteSubType, nil, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListSiteSubTypeReply)
		return ok
	})
	if err != nil {
		return nil, err
	}
	return reply.(mcom.ListSiteSubTypeReply), nil
}

func (dm *dataManager) ListSiteType(ctx context.Context) (mcom.ListSiteTypeReply, error) {
	reply, err := dm.run(ctx, FuncListSiteType, nil, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListSiteTypeReply)
		return ok
	})
	if err != nil {
		return nil, err
	}
	return reply.(mcom.ListSiteTypeReply), nil
}

func (dm *dataManager) ListStationIDs(ctx context.Context, req mcom.ListStationIDsRequest) (mcom.ListStationIDsReply, error) {
	reply, err := dm.run(ctx, FuncListStationIDs, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListStationIDsReply)
		return ok
	})
	if err != nil {
		return mcom.ListStationIDsReply{}, err
	}
	return reply.(mcom.ListStationIDsReply), nil
}

func (dm *dataManager) ListStationState(ctx context.Context) (mcom.ListStationStateReply, error) {
	reply, err := dm.run(ctx, FuncListStationState, nil, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListStationStateReply)
		return ok
	})
	if err != nil {
		return nil, err
	}
	return reply.(mcom.ListStationStateReply), nil
}

func (dm *dataManager) ListStations(ctx context.Context, req mcom.ListStationsRequest) (mcom.ListStationsReply, error) {
	reply, err := dm.run(ctx, FuncListStations, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListStationsReply)
		return ok
	})
	if err != nil {
		return mcom.ListStationsReply{}, err
	}
	return reply.(mcom.ListStationsReply), nil
}

func (dm *dataManager) ListSubstitutions(ctx context.Context, req mcom.ListSubstitutionsRequest) (mcom.ListSubstitutionsReply, error) {
	reply, err := dm.run(ctx, FuncListSubstitutions, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListSubstitutionsReply)
		return ok
	})
	if err != nil {
		return mcom.ListSubstitutionsReply{}, err
	}
	return reply.(mcom.ListSubstitutionsReply), nil
}

func (dm *dataManager) ListToolResources(ctx context.Context, req mcom.ListToolResourcesRequest) (mcom.ListToolResourcesReply, error) {
	reply, err := dm.run(ctx, FuncListToolResources, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListToolResourcesReply)
		return ok
	})
	if err != nil {
		return mcom.ListToolResourcesReply{}, err
	}
	return reply.(mcom.ListToolResourcesReply), nil
}

func (dm *dataManager) ListUnauthorizedUsers(ctx context.Context, req mcom.ListUnauthorizedUsersRequest, opts ...mcom.ListUnauthorizedUsersOption) (mcom.ListUnauthorizedUsersReply, error) {
	reply, err := dm.run(ctx, FuncListUnauthorizedUsers, req, func(expectedOpts []interface{}) (*parsedOptions, error) {
		if len(opts) != len(expectedOpts) {
			return nil, newMismatchInputOptionLengthError(len(expectedOpts), len(opts))
		}
		expectedOptions := make([]mcom.ListUnauthorizedUsersOption, len(expectedOpts))
		for i, inputOpt := range expectedOpts {
			o, ok := inputOpt.(mcom.ListUnauthorizedUsersOption)
			if !ok {
				return nil, badOptionType("mcom.ListUnauthorizedUsersOption")
			}
			expectedOptions[i] = o
		}
		return &parsedOptions{
			expected: mcom.ParseListUnauthorizedUsersOptions(expectedOptions), actual: mcom.ParseListUnauthorizedUsersOptions(opts),
		}, nil
	}, func(i interface{}) bool {
		_, ok := i.(mcom.ListUnauthorizedUsersReply)
		return ok
	})
	if err != nil {
		return nil, err
	}
	return reply.(mcom.ListUnauthorizedUsersReply), nil
}

func (dm *dataManager) ListUserRoles(ctx context.Context, req mcom.ListUserRolesRequest) (mcom.ListUserRolesReply, error) {
	reply, err := dm.run(ctx, FuncListUserRoles, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListUserRolesReply)
		return ok
	})
	if err != nil {
		return mcom.ListUserRolesReply{}, err
	}
	return reply.(mcom.ListUserRolesReply), nil
}

func (dm *dataManager) ListWorkOrders(ctx context.Context, req mcom.ListWorkOrdersRequest) (mcom.ListWorkOrdersReply, error) {
	reply, err := dm.run(ctx, FuncListWorkOrders, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListWorkOrdersReply)
		return ok
	})
	if err != nil {
		return mcom.ListWorkOrdersReply{}, err
	}
	return reply.(mcom.ListWorkOrdersReply), nil
}

func (dm *dataManager) ListWorkOrdersByDuration(ctx context.Context, req mcom.ListWorkOrdersByDurationRequest) (mcom.ListWorkOrdersByDurationReply, error) {
	reply, err := dm.run(ctx, FuncListWorkOrdersByDuration, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListWorkOrdersByDurationReply)
		return ok
	})
	if err != nil {
		return mcom.ListWorkOrdersByDurationReply{}, err
	}
	return reply.(mcom.ListWorkOrdersByDurationReply), nil
}

func (dm *dataManager) ListWorkOrdersByIDs(ctx context.Context, req mcom.ListWorkOrdersByIDsRequest) (mcom.ListWorkOrdersByIDsReply, error) {
	reply, err := dm.run(ctx, FuncListWorkOrdersByIDs, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.ListWorkOrdersByIDsReply)
		return ok
	})
	if err != nil {
		return mcom.ListWorkOrdersByIDsReply{}, err
	}
	return reply.(mcom.ListWorkOrdersByIDsReply), nil
}

func (dm *dataManager) MaterialResourceBind(ctx context.Context, req mcom.MaterialResourceBindRequest) error {
	_, err := dm.run(ctx, FuncMaterialResourceBind, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) MaterialResourceBindV2(ctx context.Context, req mcom.MaterialResourceBindRequestV2) error {
	_, err := dm.run(ctx, FuncMaterialResourceBindV2, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) SetStationConfiguration(ctx context.Context, req mcom.SetStationConfigurationRequest) error {
	_, err := dm.run(ctx, FuncSetStationConfiguration, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) SignIn(ctx context.Context, req mcom.SignInRequest, opts ...mcom.SignInOption) (mcom.SignInReply, error) {
	reply, err := dm.run(ctx, FuncSignIn, req, func(expectedOpts []interface{}) (*parsedOptions, error) {
		if len(opts) != len(expectedOpts) {
			return nil, newMismatchInputOptionLengthError(len(expectedOpts), len(opts))
		}
		expectedOptions := make([]mcom.SignInOption, len(expectedOpts))
		for i, inputOpt := range expectedOpts {
			o, ok := inputOpt.(mcom.SignInOption)
			if !ok {
				return nil, badOptionType("mcom.SignInOption")
			}
			expectedOptions[i] = o
		}
		return &parsedOptions{
			expected: mcom.ParseSignInOptions(expectedOptions), actual: mcom.ParseSignInOptions(opts),
		}, nil
	}, func(i interface{}) bool {
		_, ok := i.(mcom.SignInReply)
		return ok
	})
	if err != nil {
		return mcom.SignInReply{}, err
	}
	return reply.(mcom.SignInReply), nil
}

func (dm *dataManager) SignOut(ctx context.Context, req mcom.SignOutRequest) error {
	_, err := dm.run(ctx, FuncSignOut, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) SignOutStation(ctx context.Context, req mcom.SignOutStationRequest) error {
	_, err := dm.run(ctx, FuncSignOutStation, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) SignOutStations(ctx context.Context, req mcom.SignOutStationsRequest) error {
	_, err := dm.run(ctx, FuncSignOutStations, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) SplitMaterialResource(ctx context.Context, req mcom.SplitMaterialResourceRequest) (mcom.SplitMaterialResourceReply, error) {
	reply, err := dm.run(ctx, FuncSplitMaterialResource, req, noOptions, func(i interface{}) bool {
		_, ok := i.(mcom.SplitMaterialResourceReply)
		return ok
	})
	if err != nil {
		return mcom.SplitMaterialResourceReply{}, err
	}
	return reply.(mcom.SplitMaterialResourceReply), nil
}

func (dm *dataManager) ToolResourceBind(ctx context.Context, req mcom.ToolResourceBindRequest) error {
	_, err := dm.run(ctx, FuncToolResourceBind, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) ToolResourceBindV2(ctx context.Context, req mcom.ToolResourceBindRequestV2) error {
	_, err := dm.run(ctx, FuncToolResourceBindV2, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) UpdateAccount(ctx context.Context, req mcom.UpdateAccountRequest, opts ...mcom.UpdateAccountOption) error {
	_, err := dm.run(ctx, FuncUpdateAccount, req, func(expectedOpts []interface{}) (*parsedOptions, error) {
		if len(opts) != len(expectedOpts) {
			return nil, newMismatchInputOptionLengthError(len(expectedOpts), len(opts))
		}
		expectedOptions := make([]mcom.UpdateAccountOption, len(expectedOpts))
		for i, inputOpt := range expectedOpts {
			o, ok := inputOpt.(mcom.UpdateAccountOption)
			if !ok {
				return nil, badOptionType("mcom.UpdateAccountOption")
			}
			expectedOptions[i] = o
		}
		return &parsedOptions{
			expected: mcom.ParseUpdateAccountOptions(expectedOptions), actual: mcom.ParseUpdateAccountOptions(opts),
		}, nil
	}, noReply)
	return err
}

func (dm *dataManager) UpdateBatch(ctx context.Context, req mcom.UpdateBatchRequest) error {
	_, err := dm.run(ctx, FuncUpdateBatch, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) UpdateCarrier(ctx context.Context, req mcom.UpdateCarrierRequest) error {
	_, err := dm.run(ctx, FuncUpdateCarrier, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) UpdateDepartment(ctx context.Context, req mcom.UpdateDepartmentRequest) error {
	_, err := dm.run(ctx, FuncUpdateDepartment, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) UpdateMaterial(ctx context.Context, req mcom.UpdateMaterialRequest) error {
	_, err := dm.run(ctx, FuncUpdateMaterial, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) UpdateStation(ctx context.Context, req mcom.UpdateStationRequest) error {
	_, err := dm.run(ctx, FuncUpdateStation, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) UpdateStationGroup(ctx context.Context, req mcom.StationGroupRequest) error {
	_, err := dm.run(ctx, FuncUpdateStationGroup, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) UpdateSubstitutions(ctx context.Context, req mcom.BasicSubstitutionRequest) error {
	_, err := dm.run(ctx, FuncUpdateSubstitutions, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) UpdateUser(ctx context.Context, req mcom.UpdateUserRequest) error {
	_, err := dm.run(ctx, FuncUpdateUser, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) UpdateWorkOrders(ctx context.Context, req mcom.UpdateWorkOrdersRequest) error {
	_, err := dm.run(ctx, FuncUpdateWorkOrders, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}

func (dm *dataManager) WarehousingStock(ctx context.Context, req mcom.WarehousingStockRequest) error {
	_, err := dm.run(ctx, FuncWarehousingStock, req, noOptions, noReply)
	if err != nil {
		return err
	}
	return nil
}
